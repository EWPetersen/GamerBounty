import React, { useState, useEffect } from "react";
import { Modal, Form, Button, Alert } from "react-bootstrap";
import { useSession } from "next-auth/react";
import axios from "axios";
import "tailwindcss/tailwind.css";
import "bootstrap/dist/css/bootstrap.min.css";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Autosuggest from "react-autosuggest";

function CreateContractForm({ show, handleClose }) {
  const [gameTitle, setGameTitle] = useState("");
  const [targetPlayer, setTargetPlayer] = useState("");
  const [contractConditions, setContractConditions] = useState("");
  const [expDate, setExpDate] = useState("");
  const [bidAmount, setBidAmount] = useState("");
  const [submitStatus, setSubmitStatus] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const { data: session, status } = useSession();
  const [suggestions, setSuggestions] = useState([]);

  const handleFormSubmit = async (event) => {
    event.preventDefault();
    console.log("handleFormSubmit called");
    handleCreate({
      gameTitle,
      targetPlayer,
      contractConditions,
      expDate,
      bidAmount,
      requestedBy: session.user.email,
      contractStatus: "open",
    });
    setShowCreateForm(false);
  };

  if (status === "loading") return null; // Do not render anything while the session is loading
  if (!session) {
    return (
      <Alert variant="danger">
        You must be signed in to create a contract.
      </Alert>
    );
  }

  if (!show) {
    return null;
  }

  const handleGameTitleChange = (event, { newValue }) => {
    setGameTitle(newValue);
  };

  const fetchSuggestions = async (value) => {
    const response = await axios.get(`/api/getTitleValidation?search=${value}`);
    const data = response.data;
    return data;
  };

  const getSuggestionValue = (suggestion) => suggestion.name;

  const renderSuggestion = (suggestion) => <div>{suggestion.name}</div>;

  const onSuggestionsFetchRequested = async ({ value }) => {
    if (value.trim().length > 0) {
      const fetchedSuggestions = await fetchSuggestions(value);
      setSuggestions(fetchedSuggestions);
    } else {
      setSuggestions([]);
    }
  };

  const onSuggestionsClearRequested = () => {
    setSuggestions([]);
  };

  useEffect(() => {
    let isMounted = true;
    const fetchSuggestions = async (value) => {
      const response = await axios.get(
        `/api/getTitleValidation?search=${value}`
      );

      const data = response.data;
      if (isMounted) {
        setSuggestions(data.map((game) => ({ name: game.name })));
      }
      console.log(data);
    };
    if (gameTitle.trim().length > 0) {
      fetchSuggestions(gameTitle);
    } else {
      setSuggestions([]);
    }
    return () => {
      isMounted = false;
    };
  }, [gameTitle]);

  async function handleCreate(contract) {
    setLoading(true);
    setSubmitStatus(null);
  
    try {
      const response = await axios.post("/api/writeContracts", {
        gameTitle: contract.gameTitle,
        targetPlayer: contract.targetPlayer,
        contractConditions: contract.contractConditions,
        expDate: contract.expDate,
        bidAmount: contract.bidAmount,
        requestedBy: contract.requestedBy,
        contractStatus: contract.contractStatus,
      });
  
      console.log(response.data.data);
      setLoading(false);
      setSubmitStatus("success");
      setTimeout(() => {
        handleClose(); // Close the form after a short delay
      }, 2000);
    } catch (error) {
      setLoading(false);
      setSubmitStatus("failure");
      console.error("Error creating contract", error);
    }
  }

  return (
    <>
      <Modal show={show} onHide={handleClose}>
        <Modal.Header closeButton>
          <Modal.Title>Create Contract</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {submitStatus === "success" && (
            <Alert variant="success">Contract successfully created!</Alert>
          )}
          {submitStatus === "failure" && (
            <Alert variant="danger">
              Failed to create contract. Please try again.
            </Alert>
          )}
          <Form onSubmit={handleFormSubmit}>
            <Form.Group controlId="gameTitle">
              <Form.Label>Game: </Form.Label>
              <Form>
                <Autosuggest
                  suggestions={suggestions}
                  onSuggestionsFetchRequested={onSuggestionsFetchRequested}
                  onSuggestionsClearRequested={onSuggestionsClearRequested}
                  getSuggestionValue={getSuggestionValue}
                  renderSuggestion={renderSuggestion}
                  inputProps={{
                    name: "gameTitle",
                    value: gameTitle,
                    onChange: handleGameTitleChange,
                    placeholder: "Enter a game title",
                  }}
                />
                <button type="submit">Submit</button>
              </Form>
            </Form.Group>
            <Form.Group controlId="targetPlayer">
              <Form.Label>Mark:</Form.Label>
              <Form.Control
                type="text"
                placeholder="Who is your target?"
                value={targetPlayer}
                onChange={(event) => setTargetPlayer(event.target.value)}
              />
            </Form.Group>
            <Form.Group controlId="expDate">
              <Form.Label>Expiriation:</Form.Label>
              <DatePicker
                id="expDate"
                name="expirationDate"
                selected={expDate}
                onChange={(date) => setExpDate(date)}
                className="form-control"
                calendarClassName="dark-calendar"
                minDate={new Date()}
              />
            </Form.Group>
            <Form.Group controlId="contractConditions">
              <Form.Label>Conditions:</Form.Label>
              <Form.Control
                type="text"
                placeholder="Are there any additional requirements? (under 100char)"
                value={contractConditions}
                onChange={(event) => setContractConditions(event.target.value)}
              />
            </Form.Group>
            <Form.Group controlId="bidAmount">
              <Form.Label>Opening Bid:</Form.Label>
              <Form.Control
                type="number"
                placeholder="Enter bid amount"
                value={bidAmount}
                onChange={(event) => setBidAmount(event.target.value)}
              />
            </Form.Group>
            <Button variant="success" type="submit">
              Create
            </Button>{" "}
            <Button variant="secondary" onClick={handleClose}>
              Close
            </Button>
          </Form>
        </Modal.Body>
      </Modal>
      <style jsx global>{`
        .react-autosuggest__suggestions-list {
          margin: 0;
          padding: 0;
          list-style-type: none;
        }
        .react-autosuggest__suggestion {
          cursor: pointer;
          padding: 10px;
        }
        .react-autosuggest__suggestion--highlighted {
          background-color: #ddd;
        }
      `}</style>
    </>
  );
}

export default CreateContractForm;
